/**  * Kinetic.java * * Description:	 * @author			Matt * @version			 */package Kinetica;import java.awt.*;import java.awt.event.*;import java.applet.*;public class Kinetic extends java.applet.Applet {// IMPORTANT: Source code between BEGIN/END comment pair will be regenerated// every time the form is saved. All manual changes will be overwritten.// BEGIN GENERATED CODE	// member declarations	java.awt.Label velocityLabel = new java.awt.Label();	java.awt.Label heightLabel = new java.awt.Label();	java.awt.Label angleLabel = new java.awt.Label();	java.awt.TextField velocityField = new java.awt.TextField();	java.awt.TextField heightField = new java.awt.TextField();	java.awt.TextField angleField = new java.awt.TextField();	java.awt.Checkbox metricCheckbox = new java.awt.Checkbox();	java.awt.Button calcButton = new java.awt.Button();	java.awt.Checkbox timeCheckbox = new java.awt.Checkbox();// END GENERATED CODE	boolean isStandalone = false;		static final int originX = 30;	static final int originY = 205;	static final int lengthX = 350;	static final int lengthY = 125;		double maxDistance;	double maxHeight;	double maxTime;	boolean metric, time;	double gravForce;		double velocity, radAngle, height;	public Kinetic() {	}	// Retrieve the value of an applet parameter	public String getParameter(String key, String def) {		return isStandalone ? System.getProperty(key, def) :			(getParameter(key) != null ? getParameter(key) : def);	}	// Get info on the applet parameters	public String[][] getParameterInfo() {		return null;	}	// Get applet information	public String getAppletInfo() {		return "Applet Information";	}	// Initialize the applet	public void init() {		try {			initComponents();		}		catch (Exception e) {			e.printStackTrace();		}		maxDistance = 30;		maxHeight = 2;		maxTime = 1;		metric = metricCheckbox.getState();		time = timeCheckbox.getState();		gravForce = 32./3.2808;		velocity = 20;		radAngle = 0;		height = 1;	}	public void initComponents() throws Exception {// IMPORTANT: Source code between BEGIN/END comment pair will be regenerated// every time the form is saved. All manual changes will be overwritten.// BEGIN GENERATED CODE		// the following code sets the frame's initial state		velocityLabel.setText("Velocity (m/s)");		velocityLabel.setLocation(new java.awt.Point(10, 10));		velocityLabel.setVisible(true);		velocityLabel.setSize(new java.awt.Dimension(80, 20));		heightLabel.setText("Height (m)");		heightLabel.setLocation(new java.awt.Point(110, 10));		heightLabel.setVisible(true);		heightLabel.setSize(new java.awt.Dimension(70, 20));		angleLabel.setText("Angle (deg)");		angleLabel.setLocation(new java.awt.Point(200, 10));		angleLabel.setVisible(true);		angleLabel.setSize(new java.awt.Dimension(70, 20));		velocityField.setText("20");		velocityField.setLocation(new java.awt.Point(10, 40));		velocityField.setVisible(true);		velocityField.setSize(new java.awt.Dimension(70, 20));		heightField.setText("1.0");		heightField.setLocation(new java.awt.Point(110, 40));		heightField.setVisible(true);		heightField.setSize(new java.awt.Dimension(60, 20));		angleField.setText("0");		angleField.setLocation(new java.awt.Point(200, 40));		angleField.setVisible(true);		angleField.setSize(new java.awt.Dimension(60, 20));		metricCheckbox.setLocation(new java.awt.Point(280, 0));		metricCheckbox.setLabel("Metric Units");		metricCheckbox.setVisible(true);		metricCheckbox.setSize(new java.awt.Dimension(110, 20));		metricCheckbox.setState(true);		calcButton.setLocation(new java.awt.Point(280, 50));		calcButton.setLabel("Calculate");		calcButton.setVisible(true);		calcButton.setSize(new java.awt.Dimension(90, 20));		timeCheckbox.setLocation(new java.awt.Point(280, 20));		timeCheckbox.setLabel("Measure Time");		timeCheckbox.setVisible(true);		timeCheckbox.setSize(new java.awt.Dimension(110, 20));		setLocation(new java.awt.Point(0, 0));		setLayout(null);		setSize(new java.awt.Dimension(400, 250));		add(velocityLabel);		add(heightLabel);		add(angleLabel);		add(velocityField);		add(heightField);		add(angleField);		add(metricCheckbox);		add(calcButton);		add(timeCheckbox);// END GENERATED CODE	}		public boolean action(Event e, Object obj)	{		if (e.target == calcButton)			regraph();		else if (e.target == metricCheckbox)		{			if (metric)			{				metric = false;				maxDistance *= 3.2808;				maxHeight *= 3.2808;				gravForce *= 3.2808;				velocity *= 3.2808;				height *= 3.2808;				velocity = (double)Math.round(velocity*100)/100;				height = (double)Math.round(height*100)/100;				velocityLabel.setText("Velocity (f/s)");				heightLabel.setText("Height (feet)");				velocityField.setText((new Double(velocity)).toString());				heightField.setText((new Double(height)).toString());			}			else			{				metric = true;				maxDistance /= 3.2808;				maxHeight /= 3.2808;				gravForce /= 3.2808;				velocity /= 3.2808;				height /= 3.2808;				velocity = (double)Math.round(velocity*100)/100;				height = (double)Math.round(height*100)/100;				velocityLabel.setText("Velocity (m/s)");				heightLabel.setText("Height (m)");				velocityField.setText((new Double(velocity)).toString());				heightField.setText((new Double(height)).toString());			}		}		else if (e.target == timeCheckbox)		{			if (time)				time = false;			else				time = true;		}		return super.action(e, obj);	}		public void regraph()	{		velocity = ObtainValue(velocityField);		height = ObtainValue(heightField);		radAngle = ObtainValue(angleField) * (Math.PI/180);		repaint();	}		public void paint(Graphics g)	{		if (height>maxHeight)			maxHeight = height;		drawAxes(g);		drawPhysGraph(g);		if (time)		{			drawTimeTicks(g);			drawTimeGraph(g);		}	}		public void drawAxes(Graphics g)	{		g.setColor(Color.black);		g.drawLine(originX-10,originY, originX+lengthX,originY);		g.drawLine(originX,originY+10, originX,originY-lengthY);		for (int x=originX; x<(originX+lengthX); x+=(lengthX/10))		{			g.drawLine(x,originY-6, x,originY+6);			double d = (double)Math.round(((double)(x-originX)/lengthX)*maxDistance*10)/10;			g.drawString((new Double(d)).toString(), x-10, originY+20);		}		for (int y=originY; y>(originY-lengthY); y-=((double)lengthY/6))		{			g.drawLine(originX-6,y, originX+6,y);			double d = (double)Math.round(((double)(originY-y)/lengthY)*maxHeight*10)/10;			g.drawString((new Double(d)).toString(), originX-30, y);		}	}		public void drawPhysGraph(Graphics g)	{		g.setColor(Color.red);		double gx=0, gy=height;		int x, y;		int px = 0;		int py = -(int)((gy/maxHeight)*lengthY)+originY;		for (double t=0; gy>0; t+=0.01)		{			gx = velocity*Math.cos(radAngle)*t;			gy = (velocity*Math.sin(radAngle)*t) - (gravForce*t*t) + height;			x = (int)((gx/maxDistance)*lengthX)+originX;			y = -(int)((gy/maxHeight)*lengthY)+originY;			g.drawLine(px,py, x,y);			px = x; py = y;		}		if (gx>maxDistance)		{			maxDistance = gx;			repaint();		}	}		public void drawTimeTicks(Graphics g)	{		g.setColor(Color.blue);		for (int x=originX; x<(originX+lengthX); x+=(lengthX/10))		{			double d = (double)Math.round(((double)(x-originX)/lengthX)*maxTime*100)/100;			g.drawString((new Double(d)).toString(), x-10, originY+32);		}	}		public void drawTimeGraph(Graphics g)	{		g.setColor(Color.blue);		double gx=0, gy=height;		int x, y;		int px = 0;		int py = -(int)((gy/maxHeight)*lengthY)+originY;		double t = 0;		for (t=0; gy>0; t+=0.01)		{			gy = (velocity*Math.sin(radAngle)*t) - (gravForce*t*t) + height;			x = (int)((t/maxTime)*lengthX)+originX;			y = -(int)((gy/maxHeight)*lengthY)+originY;			g.drawLine(px,py, x,y);			px = x; py = y;		}		if (t>maxTime)		{			maxTime = t;			repaint();		}	}		public double ObtainValue(TextField field)	{		String s;		double value;				s = field.getText();		try		{			value = (Double.valueOf(s)).doubleValue();		} catch (Exception e) {			value = 0;			// Error reporting goes here		}		   		return value;	}}