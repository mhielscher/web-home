/**  * Calculator.java * * Description:	 * @author			Matt * @version			 */package RLCCalc;import java.awt.*;import java.awt.event.*;import java.applet.*;public class Calculator extends java.applet.Applet {// IMPORTANT: Source code between BEGIN/END comment pair will be regenerated// every time the form is saved. All manual changes will be overwritten.// BEGIN GENERATED CODE	// member declarations	java.awt.Label voltageLabel = new java.awt.Label();	java.awt.Label inductanceLabel = new java.awt.Label();	java.awt.Label capLabel = new java.awt.Label();	java.awt.Label resistLabel = new java.awt.Label();	java.awt.TextField resistField = new java.awt.TextField();	java.awt.TextField inductanceField = new java.awt.TextField();	java.awt.TextField capField = new java.awt.TextField();	java.awt.TextField voltageField = new java.awt.TextField();	java.awt.Button calcButton = new java.awt.Button();	java.awt.Label errorLabel = new java.awt.Label();// END GENERATED CODE	boolean isStandalone = false;		double r, l, c, v;	double a, u, b; // also known as omega	double maxAmps, peakAmps;	double turnOffTime;	int maxTime;	boolean turnOff;	int originX, originY, endX;	int peakX, peakY;	double peakTime;	int damped;	public Calculator() {	}	// Retrieve the value of an applet parameter	public String getParameter(String key, String def) {		return isStandalone ? System.getProperty(key, def) :			(getParameter(key) != null ? getParameter(key) : def);	}	// Get info on the applet parameters	public String[][] getParameterInfo() {		return null;	}	// Get applet information	public String getAppletInfo() {		return "Applet Information";	}	// Initialize the applet	public void init() {		try {			initComponents();		}		catch (Exception e) {			e.printStackTrace();		}		r = 0.25; l = 300e-6;		c = 5000e-6; v = 200;		maxTime = 30;		maxAmps = 400; peakAmps = 0;		turnOffTime = 8.3e-3;		turnOff = false;		originX = 30;		originY = 350;		endX = 440;		peakTime = 0;		CalculateMacros();		repaint();	}	public void initComponents() throws Exception {// IMPORTANT: Source code between BEGIN/END comment pair will be regenerated// every time the form is saved. All manual changes will be overwritten.// BEGIN GENERATED CODE		// the following code sets the frame's initial state		voltageLabel.setText("Voltage (V)");		voltageLabel.setLocation(new java.awt.Point(320, 10));		voltageLabel.setVisible(true);		voltageLabel.setSize(new java.awt.Dimension(60, 20));		inductanceLabel.setText("Inductance (uH)");		inductanceLabel.setLocation(new java.awt.Point(120, 10));		inductanceLabel.setVisible(true);		inductanceLabel.setSize(new java.awt.Dimension(80, 20));		capLabel.setText("Capacitance (uF)");		capLabel.setLocation(new java.awt.Point(220, 10));		capLabel.setVisible(true);		capLabel.setSize(new java.awt.Dimension(90, 20));		resistLabel.setText("Resistance (ohms)");		resistLabel.setLocation(new java.awt.Point(10, 10));		resistLabel.setVisible(true);		resistLabel.setSize(new java.awt.Dimension(90, 20));		resistField.setText("0.25");		resistField.setLocation(new java.awt.Point(10, 30));		resistField.setVisible(true);		resistField.setSize(new java.awt.Dimension(70, 20));		inductanceField.setText("300");		inductanceField.setLocation(new java.awt.Point(120, 30));		inductanceField.setVisible(true);		inductanceField.setSize(new java.awt.Dimension(70, 20));		capField.setText("5000");		capField.setLocation(new java.awt.Point(220, 30));		capField.setVisible(true);		capField.setSize(new java.awt.Dimension(70, 20));		voltageField.setText("200");		voltageField.setLocation(new java.awt.Point(320, 30));		voltageField.setVisible(true);		voltageField.setSize(new java.awt.Dimension(70, 20));		calcButton.setLocation(new java.awt.Point(10, 60));		calcButton.setLabel("Calculate");		calcButton.setVisible(true);		calcButton.setSize(new java.awt.Dimension(70, 20));		errorLabel.setForeground(java.awt.Color.red);		errorLabel.setLocation(new java.awt.Point(110, 60));		errorLabel.setVisible(true);		errorLabel.setSize(new java.awt.Dimension(300, 20));		setLocation(new java.awt.Point(0, 0));		setLayout(null);		setSize(new java.awt.Dimension(450, 400));		add(voltageLabel);		add(inductanceLabel);		add(capLabel);		add(resistLabel);		add(resistField);		add(inductanceField);		add(capField);		add(voltageField);		add(calcButton);		add(errorLabel);// END GENERATED CODE	}		public boolean action(Event e, Object arg)	{		if (e.target == calcButton)		{			InputValues();			CalculateMacros();			repaint();		}	/*	else if (e.target == turnOffCheckbox)		{			if (turnOff)			{				turnOffField.setEnabled(false);				turnOffLabel.setEnabled(false);				turnOff = false;			}			else			{				turnOffField.setEnabled(true);				turnOffLabel.setEnabled(true);				turnOff = true;			}			repaint();		}*/		return super.action(e, arg);	}		public void paint(Graphics g)	{		// Draw the axes		g.drawLine(0,originY, 450,originY);		g.drawLine(originX,500, originX,100);		// Make tick marks and label them		DrawTickMarks(g);		// Draw the curve		DrawGraph(g);		// Check the peak current and maxAmps and write them to screen		if (peakAmps>maxAmps)		{			maxAmps = peakAmps;			repaint();		}		g.setColor(Color.darkGray);		g.drawString((new Double((double)(Math.round(maxAmps*10))/10)).toString(), originX+5, 110); //0.1A		g.drawString((new Double((double)(Math.round(peakAmps*10))/10)).toString(), peakX, peakY); //0.1A	}		public void InputValues()	{		ReportError("");		r = Math.abs(ObtainValue(resistField));		l = Math.abs(ObtainValue(inductanceField)) * 1e-6;		c = Math.abs(ObtainValue(capField)) * 1e-6;		v = Math.abs(ObtainValue(voltageField));	}		public void CalculateMacros()	{		if (r*r<(4*l)/c)		{			damped = -1; // underdamped			u = Math.sqrt((1/(l*c)) - ((r*r)/((2*l)*(2*l))));			a = v/(u*l);			b = -r/(2*l);		}		else if (r*r>(4*l)/c)		{			damped = 1; // overdamped			u = Math.sqrt(((r*r)/((2*l)*(2*l))) - (1/(l*c)));			a = v/(u*l);			b = -r/(2*l);		}		else		{			damped = 0; // critically damped			u = 0;			a = v/l;			b = -r/(2*l);		}	}		public void DrawTickMarks(Graphics g)	{		// Draw time tick marks and label up to maxTime		double ratioX = (double)(endX - originX)/maxTime;		for (int t=0; t<maxTime; t+=5)		{			int gx = (int)((double)t * ratioX) + originX;			g.setColor(Color.black);			g.drawLine(gx, originY-5, gx, originY+5);			g.setColor(Color.blue);			g.drawString((new Integer(t)).toString(), gx-4, originY+20);		}		// Draw current tick marks, 50A steps (no labeling)		g.setColor(Color.black);		double ratioY = (double)(originY - 100)/maxAmps;		for (int c=0; c<=maxAmps; c+=50)		{			int gy = -(int)((double)c * ratioY) + originY;			g.drawLine(originX-4, gy, originX+4, gy);		}	}		public void DrawGraph(Graphics g)	{		peakAmps = 0;		double ratioX = (double)(endX - originX)/maxTime;		double ratioY = (double)(originY - 100)/maxAmps;		int px=originX, py=originY;		double gx=0, gy=0;		double pgy=0;		g.setColor(Color.red);		for (int t=1; t<(endX-originX); t++)		{			gx = ((double)t/ratioX)*1e-3;			if (damped==-1)				gy = a*Math.exp(b*gx)*Math.sin(u*gx);			else if (damped==1)				gy = a*Math.exp(b*gx)*sinh(u*gx);			else				gy = a*gx*Math.exp(b*gx);			int y = -(int)(gy*ratioY) + originY;			g.drawLine(px,py, t+originX,y);			if (gy<pgy && peakAmps == 0) // find peak current and time			{				peakAmps = pgy;				peakX = t+originX;				peakY = py;			}			px = t+originX; py = y;			pgy = gy;		}	}		public void ReportError(String s)	{		errorLabel.setText(s);	}		public double ObtainValue(TextField field)	{		String s;		double value;				s = field.getText();		try		{			value = (Double.valueOf(s)).doubleValue();		} catch (Exception e) {			value = 0;			ReportError("Bad input value: "+s);		}		   		return value;	}		final static double sinh(double x)	{		return 0.5*(Math.exp(x)-Math.exp(-x));    }}